"Phylogenetic",
"0 < D < 1 (both H0s rejected)",
"Random",
"Indeterminate (neither H0 rejected)"),
guide = guide_legend(title = NULL)
) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_text(family = "Arial",
size = 12),
plot.margin = margin(.2, .2, .2, .2, "cm"))
# Save file
loadfonts(device = "postscript", quiet = TRUE)
cairo_pdf(file = "../fig/d-sig-swatch.pdf", width = 8.90, height = 5.5)
d_swatch
dev.off()
################################################################################
# D scatterplots
d_test_table$skewness <- sapply(d_test_table$biphone, function(x)
max(filter(d_test_table, biphone == x) %>% dplyr::select(count_0, count_1)) /
sum(filter(d_test_table, biphone == x) %>% dplyr::select(count_0, count_1))
)
d_test_table$result <- as.factor(d_test_table$result)
d_test_table$result <- factor(d_test_table$result, levels(d_test_table$result)[c(3,4,1,5,2)])
# cols based on 4-class RdBu diverging scale @ colorbrewer2.org
cols = c("More clumped" = "#f4a582",
"Phylogenetic" = "#ca0020",
"0 < D < 1 (both H0s rejected)" = "#683868",
"Random" = "#0571b0",
"More dispersed" = "#92c5de",
"Indeterminate (neither H0 rejected)" = "grey80"
)
col_scale <- scale_fill_manual(values = cols)
nlangs <-   ggplot(d_test_table, aes(D, languages)) +
geom_point(aes(fill = result), colour = "black", pch = 21, size = 3, alpha = 0.7) +
col_scale +
ylab("n language varieties") +
theme_cowplot()
skewness <- ggplot(d_test_table, aes(D, skewness)) +
geom_point(aes(fill = result), colour = "black", pch = 21, size = 3, alpha = 0.7) +
col_scale +
theme_cowplot()
legend <- get_legend(
nlangs +
theme(legend.position =  "bottom",
legend.box.margin = margin(0,0,0,12))
)
prow <- plot_grid(
nlangs + theme(legend.position = "none"),
skewness + theme(legend.position = "none"),
labels = c("(a)", "(b)"),
hjust = 0
)
d_scatterplots <- plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .1))
# Save file
cairo_pdf("../fig/d-scatterplots.pdf", width = 9.708, height = 4.5)
d_scatterplots
dev.off()
################################################################################
# Filtered D density plot
filtered_d_test_table <- filter(d_test_table, skewness < .97)
d_density_plot_filtered <- ggplot(filtered_d_test_table, aes(D)) +
geom_density(fill = "grey80") +
geom_vline(aes(xintercept = mean(d_test_table$D)), colour = "red") +
geom_vline(aes(xintercept = 0), linetype = "dashed") +
geom_vline(aes(xintercept = 1), linetype = "dashed") +
scale_x_continuous(breaks = c(-2, -1, 0, 1, 2)) +
theme_cowplot()
cairo_pdf("../fig/d-density-filtered.pdf", width = 6.472, height = 4)
d_density_plot_filtered
dev.off()
################################################################################
# Filtered D swatch plot
# Gather D scores
d_scores <- dplyr::select(filtered_d_test_table, D)
d_scores[,2:3] <- colsplit(filtered_d_test_table$biphone, "_", names = c("phone1", "phone2"))
d_matrix <- as.data.frame(spread(d_scores, phone2, D))
rownames(d_matrix) <- d_matrix$phone1
d_matrix <- d_matrix[,-1]
# Get data df into shape
df <- as.data.frame(d_matrix)
df$phone1 <- rownames(df)
df <- gather(df, phone2, value, -phone1)
# Establish the phones & order to plot
phones1 <- unique(df$phone1)
phones2 <- unique(df$phone2)
phones <- union(phones1, phones2)
order <- ausphon_IPA_order()
is_break <- str_to_lower(order) == "break"
order[is_break] <- ""
plot_length1 <- sum(is_break) + length(phones1)
plot_length2 <- sum(is_break) + length(phones2)
order1 <- order[order %in% c("", phones1)]
order2 <- order[order %in% c("", phones2)]
df$phone1_order <- match(df$phone1, order1)
df$phone2_order <- match(df$phone2, order2)
# Plot
d_swatch_filtered <- ggplot() +
scale_x_continuous(breaks = 1:plot_length2 - 0.5,
labels = order2) +
scale_y_continuous(breaks = -(1:plot_length1 - 0.5),
labels = order1) +
geom_rect(data = df,
mapping = aes(xmin = phone2_order - 1,
xmax = phone2_order,
ymax = -(phone1_order - 1),
ymin = -(phone1_order),
fill = value
)
) +
scale_fill_gradientn(
# Based on 10-class RdBu diverging scale @ colorbrewer2.org
colours = c("white", "#fddbc7", "#b2182b", "#2166ac", "#d1e5f0", "white"),
values = c(min(df$value, na.rm = TRUE), -1, 0, 1, 2, max(df$value, na.rm = TRUE)),
na.value = "grey90",
rescaler = function(x, ...) x,
guide = guide_colourbar(
title = NULL,
barheight = unit(0.5, "npc")
)
) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_text(family = "Arial",
size = 12),
plot.margin = margin(.2, .2, .2, .2, "cm"))
cairo_pdf("../fig/d-swatch-filtered.pdf", width = 8.5, height = 6.5)
d_swatch_filtered
dev.off()
################################################################################
# K TESTS
################################################################################
K_biphones_fwd_results <- read_csv("../results/K_biphones_fwd_results_2019-12-17.csv")
K_biphones_fwd_results$significant <- as.factor(K_biphones_fwd_results$significant)
K_biphones_bkwd_results <- read_csv("../results/K_biphones_bkwd_results_2019-12-17.csv")
K_biphones_bkwd_results$significant <- as.factor(K_biphones_bkwd_results$significant)
K_biphones_fwd_norm_results <- read_csv("../results/K_biphones_fwd_norm_results_2019-12-17.csv")
K_biphones_fwd_norm_results$significant <- as.factor(K_biphones_fwd_norm_results$significant)
K_biphones_bkwd_norm_results <- read_csv("../results/K_biphones_bkwd_norm_results_2019-12-17.csv")
K_biphones_bkwd_norm_results$significant <- as.factor(K_biphones_bkwd_norm_results$significant)
################################################################################
# K density plot
k_all_biphones <- bind_rows(K_biphones_fwd_results, K_biphones_bkwd_results)
k_density <- ggplot(k_all_biphones, aes(K)) +
geom_density(fill = "grey80") +
geom_vline(aes(xintercept = mean(k_all_biphones$K)), colour = "red") +
theme_cowplot()
cairo_pdf("../fig/k-density.pdf", width = 6.472, height = 4)
k_density
dev.off()
################################################################################
# K swatch plot
# Gather K test results
k_results <- dplyr::select(K_biphones_fwd_results, value = K)
k_results[,2:3] <- colsplit(K_biphones_fwd_results$biphone, "_", names = c("phone1", "phone2"))
k_results <- as.data.frame(spread(k_results, phone2, value))
rownames(k_results) <- k_results$phone1
k_results <- k_results[,-1]
# Get data df into shape
df <- as.data.frame(k_results)
df$phone1 <- rownames(df)
df <- gather(df, phone2, value, -phone1)
# Establish the phones & order to plot
phones1 <- unique(df$phone1)
phones2 <- unique(df$phone2)
phones <- union(phones1, phones2)
order <- ausphon_IPA_order()
is_break <- str_to_lower(order) == "break"
order[is_break] <- ""
plot_length1 <- sum(is_break) + length(phones1)
plot_length2 <- sum(is_break) + length(phones2)
order1 <- order[order %in% c("", phones1)]
order2 <- order[order %in% c("", phones2)]
df$phone1_order <- match(df$phone1, order1)
df$phone2_order <- match(df$phone2, order2)
# Plot
k_swatch <- ggplot() +
scale_x_continuous(breaks = 1:plot_length2 - 0.5,
labels = order2) +
scale_y_continuous(breaks = -(1:plot_length1 - 0.5),
labels = order1) +
geom_rect(data = df,
mapping = aes(xmin = phone2_order - 1,
xmax = phone2_order,
ymax = -(phone1_order - 1),
ymin = -(phone1_order),
fill = value
)
) +
scale_fill_gradientn(values = seq(0,2,length.out = 19),
# Based on 9-class Reds sequential scale @ colorbrewer2.org
colours = c("white", "#fff5f0", "#fee0d2", "#fcbba1", "#fc9272",
"#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d",
"#a50f15", "#cb181d", "#ef3b2c", "#fb6a4a", "#fc9272",
"#fcbba1","#fee0d2","#fff5f0","white"),
na.value = "grey90",
rescaler = function(x, ...) x,
guide = guide_colourbar(
title = NULL,
barheight = unit(0.5, "npc")
)
) +
#    scale_fill_gradient2(high = "#fddbc7",
#                       mid = "#b2182b",
#                       low = "#d1e5f0",
#                       na.value = "grey80",
#                       midpoint = 1,
#                       #labels = scales::unit_format("", digits = 3),
#                       guide = guide_colourbar(
#                         title = NULL,
#                         barheight = unit(0.5, "npc")
#                       )
#  ) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_text(family = "Arial",
size = 12),
plot.margin = margin(.2, .2, .2, .2, "cm"))
cairo_pdf("../fig/k-swatch.pdf", width = 8.5, height = 6.5)
k_swatch
dev.off()
################################################################################
# K scatterplot
K_scatterplot <- ggplot(bind_rows(K_biphones_fwd_results, K_biphones_bkwd_results), aes(K, n_langs)) +
geom_point(aes(fill = significant), colour = "black", pch = 21, size = 2, alpha = 0.7) +
scale_fill_manual(values = c("yes" = "#d7191c", "no" = "#2c7bb6")) +
ylab("n language varieties") +
theme_cowplot()
cairo_pdf("../fig/k-scatterplot.pdf", width = 6.472, height = 4)
K_scatterplot
dev.off()
################################################################################
# Forward vs backward transitions
fwd <- dplyr::select(K_biphones_fwd_results, K)
fwd$Direction <- "Forward"
bkwd <- dplyr::select(K_biphones_bkwd_results, K)
bkwd$Direction <- "Backward"
df <- bind_rows(fwd, bkwd)
fwd_vs_bkwd <- ggplot(df, aes(K, fill = Direction)) +
scale_fill_manual(values = c("Forward" = "#d7191c", "Backward" = "#2c7bb6")) +
geom_density(alpha = 0.5) +
theme_cowplot()
cairo_pdf("../fig/k-fwd-bkwd.pdf", width = 6.472, height = 4)
fwd_vs_bkwd
dev.off()
################################################################################
# Original vs normalised data values
orig <- bind_rows(K_biphones_fwd_results, K_biphones_bkwd_results) %>%
dplyr::select(K)
orig$transformation <- "None"
norm <- bind_rows(K_biphones_fwd_norm_results, K_biphones_bkwd_norm_results) %>%
dplyr::select(K)
norm$transformation <- "Normal"
df <- bind_rows(orig, norm)
orig_vs_norm <- ggplot(df, aes(K, fill = transformation)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("Normal" = "#d7191c", "None" = "#2c7bb6")) +
theme_cowplot()
cairo_pdf("../fig/k-orig-norm.pdf", width = 6.472, height = 4)
orig_vs_norm
dev.off()
################################################################################
# K TESTS WITH NATURAL SOUND CLASSES
################################################################################
K_place_fwd_results        <- read_csv("../results/K_place_fwd_results_2019-12-17.csv")
K_place_bkwd_results       <- read_csv("../results/K_place_bkwd_results_2019-12-17.csv")
K_major_place_fwd_results  <- read_csv("../results/K_major_place_fwd_results_2019-12-17.csv")
K_major_place_bkwd_results <- read_csv("../results/K_major_place_bkwd_results_2019-12-17.csv")
K_manner_fwd_results       <- read_csv("../results/K_manner_fwd_results_2019-12-17.csv")
K_manner_bkwd_results      <- read_csv("../results/K_manner_bkwd_results_2019-12-17.csv")
################################################################################
# Code used to produce summary table
place <- bind_rows(K_place_fwd_results, K_place_bkwd_results)
maj_place <- bind_rows(K_major_place_fwd_results, K_major_place_bkwd_results)
manner <- bind_rows(K_manner_fwd_results, K_manner_bkwd_results)
natural_classes_summary <- tibble("Classes" = c("Place", "Major place", "Manner"),
"Mean K"  = c(mean(place$K), mean(maj_place$K), mean(manner$K)),
"n characters" = c(nrow(place), nrow(maj_place), nrow(manner)),
"significant (%)" = c(sum(place$significant == "yes"), sum(maj_place$significant == "yes"), sum(manner$significant == "yes"))
)
kable(natural_classes_summary, digits = 2, format = "latex", booktabs = TRUE, caption = "Summary of $K$ analysis for forward and backward transition frequencies between different natural classes. The two rightmost columns indicate the total number of characters analyzed and the percentage of those characters with a significant degree of phylogenetic signal according to the randomization procedure.")
################################################################################
# K natural classes plot
k_place <- dplyr::select(place, K)
k_place$feature_type <- "Places of articulation"
k_major_place <- dplyr::select(maj_place, K)
k_major_place$feature_type <- "Major places of articulation"
k_manner <- dplyr::select(manner, K)
k_manner$feature_type <- "Manners of articulation"
k_all_classes <- bind_rows(k_place, k_major_place, k_manner)
K_natural_classes <- ggplot(k_all_classes, aes(K, fill = feature_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("Places of articulation" = "#d7191c",
"Major places of articulation" = "#66c2a5",
"Manners of articulation" = "#2c7bb6")) +
labs(fill = "Natural class type") +
theme_cowplot()
cairo_pdf("../fig/k-natural-classes.pdf", width = 6.472, height = 4)
K_natural_classes
dev.off()
################################################################################
# K biphones vs classes
k_biphones <- dplyr::select(orig, K)
k_biphones$character_type <- "Biphones"
k_all_classes <- dplyr::select(k_all_classes, K)
k_all_classes$character_type <- "Natural classes"
all_k <- bind_rows(k_biphones, k_all_classes)
biphones_vs_classes <- ggplot(all_k, aes(K, fill = character_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("Natural classes" = "#d7191c", "Biphones" = "#2c7bb6")) +
labs(fill = "Character type") +
theme_cowplot()
cairo_pdf("../fig/k-biphones-classes.pdf", width = 6.472, height = 4)
biphones_vs_classes
dev.off()
extract_freq_dataset
query
get_dataset_param_list
get_clean_aus_stems
library(Ausphonlex)
library(tidyverse)
set.seed(2019)
# Load latest official version of Ausphonlex database as object 'aus'
aus <- ausphonlex_v0.5
# Get a list of lex IDs for lexicons that are:
#   a) clean
#   b) contain at least 250 lexical items (cf. Dockum & Bowern, 2019)
# https://www.researchgate.net/publication/332751956_Swadesh_lists_are_not_long_enough_Drawing_phonological_generalizations_from_limited_data
aus_size <- get_aus_size(id = get_clean_lex_IDs()) %>%
filter(n_forms >= 250)
# Get biphone dataset (forward and backward)
b_fwd  <- extract_freq_dataset("biphone_fwd_clean")
b_bkwd <- extract_freq_dataset("biphone_bkwd_clean")
names(b_fwd)[2:ncol(b_fwd)]   <- paste0(names(b_fwd)[2:ncol(b_fwd)], "_fwd")
names(b_bkwd)[2:ncol(b_bkwd)] <- paste0(names(b_bkwd)[2:ncol(b_bkwd)], "_bkwd")
view(b_fwd[1:10,1:10])
biphones <- full_join(b_fwd, b_bkwd, by = "lex_ID") %>%
filter(lex_ID %in% aus_size$lex_ID)
View(biphones(1:10,1:10))
View(biphones[1:10,1:10])
### Matching language varieties between phonotactic and cognate datasets ###
# Get list of all languages for which we have data
our_IDs <- unique(c(biphones$lex_ID, sound_classes$lex_ID))
our_lgs <- get_aus_varname(our_IDs)
### Matching language varieties between phonotactic and cognate datasets ###
# Get list of all languages for which we have data
our_IDs <- unique(c(biphones$lex_ID))
our_lgs <- get_aus_varname(our_IDs)
# Get list of all languages in the cognate data
cogs    <- read_tsv("Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
setwd("~/Desktop/Github/PN_treebuilding/Data_prep")
setwd("~/Desktop/Github/PN_treebuilding/Data_prep")
# Get list of all languages in the cognate data
cogs    <- read_tsv("Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
# Get list of all languages in the cognate data
cogs    <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
CBs_lgs <- unique(cogs$X4)
Map_DB_Wordlists <- read_csv("~/Desktop/Github/erichround/Ausphonlex/dbs/Map-DB-Wordlists.csv") %>%
mutate(lex_ID = as.numeric(Vocab_ID), tax_label = Bowern_307_taxon_label) %>%
select(one_of(c("lex_ID","Name", "tax_label")))
# Add taxon labels to phonotactic datasets
biphones      <- left_join(biphones, Map_DB_Wordlists, by = "lex_ID")
View(biphones[1:10,1:10])
biphone_traits <- filter(biphones, !is.na(biphones$tax_label)) %>%
select(-c("lex_ID", "Name")) %>%
select(tax_label, everything())
View(biphone_traits[1:10,1:10])
write_tsv(biphone_traits, paste0("Data/biphone_traits_", Sys.Date(), ".tsv"), na = "?", col_names = FALSE)
write_tsv(biphone_traits, paste0("~/Desktop/biphone_traits_", Sys.Date(), ".tsv"), na = "?", col_names = FALSE)
View(biphone_traits[1:10,1:10])
?write_tsv
yearsBP <- list("Yanda" = 100, "Badjiri" = 40, "Guwa" = 100, "Adnyamathanha" = 25, "AghuTharrnggala" = 30, "Alngith" = 0, "Alyawarr" = 0, "Aminungo" = 120, "Antekerrepenhe" = 30, "Arabana" = 30, "Awabakal" = 170, "Ayapathu" = 0, "Badimaya" = 10, "Balkurra" = 160, "Bandjalang" = 20, "Barna" = 0, "BarrowPoint" = 40, "Batyala" = 50, "Belyando" = 0, "BidyaraGungabula" = 30, "Bilinarra" = 10, "Bindal" = 30, "Bindjali" = 0, "Biri" = 30, "Birrpayi" = 130, "Bularnu" = 30, "Bunganditj" = 130, "CentralAnmatyerr" = 0, "ChampionBay" = 0, "Colac" = 140, "Coobenpil" = 0, "Coonambella" = 0, "Dalla" = 0, "Darkinyung" = 120, "DawsonRiver" = 120, "Dhangu" = 0, "Dharawal" = 130, "Dharawala" = 0, "Dharuk" = 210, "Dharumbal" = 0, "Dhayyi" = 0, "Dhudhuroa" = 150, "Dhurga" = 40, "Dhuwal" = 0, "Dhuwala" = 0, "Diyari" = 30, "Djabugay" = 30, "Djambarrpuyngu" = 0, "Djapu" = 0, "Djinang" = 0, "Durubul" = 60, "Duungidjawu" = 50, "Dyirbal" = 30, "Eucla" = 120, "FlindersIsland" = 40, "Gamilaraay" = 40, "Ganggalida" = 0, "Gangulu" = 30, "Garlali" = 35, "Githabul" = 0, "Golpa" = 0, "GoorengGooreng" = 40, "Gudang" = 0, "Gudjal" = 10, "GuguBadhun" = 0, "Gugumini" = 0, "Gumatj" = 0, "Gumbaynggir" = 30, "Gunditjmara" = 140, "Gundungurra" = 150, "Gunggari" = 50, "Gunya" = 30, "Gupapuyngu" = 0, "Gurindji" = 10, "GuuguYimidhirr" = 30, "Guwamu" = 50, "Guwar" = 0, "Guyani" = 130, "HOPKINSRIVER" = 0, "Ikarranggal" = 0, "Injinoo" = 0, "IrwinMurchison" = 0, "Iyora" = 210, "Jaitmatang" = 160, "Jaru" = 10, "JaruMcC" = 10, "Jiwarli" = 20, "Jiwarliny" = 10, "KKY" = 20, "KLY" = 20, "Kaanju" = 30, "Kalkatungu" = 40, "Kamilaroi" = 180, "Kaniyang" = 0, "Karajarri" = 10, "KarajarriNW" = 70, "Kariyarra" = 10, "Karree" = 120, "Kartujarra" = 10, "Karuwali" = 100, "Katthang" = 120, "Kaurna" = 180, "Kayardild" = 0, "Kaytetye" = 30, "Keerraywoorroong" = 100, "Keramin" = 160, "KokNar" = 0, "KokoBera" = 0, "KuguNganhcara" = 20, "Kukatj" = 20, "Kukatja" = 10, "KukuWura" = 0, "KukuYalanji" = 20, "Kungadutyi" = 40, "Kungkari" = 100, "Kunjen" = 0, "Kurnu" = 40, "Kurrama" = 10, "Kurtjar" = 30, "KuukThaayorre" = 0, "KuukuYau" = 10, "Lardil" = 0, "Linngithigh" = 40, "Mabuiag" = 95, "Malgana" = 30, "Malngin" = 10, "Malyangapa" = 50, "MangalaMcK" = 30, "MangalaNW" = 70, "Manjiljarra" = 0, "Margany" = 30, "MartuWangka" = 10, "Martuthunira" = 0, "MaryRiverandBunyaBunyaCountry" = 120, "MathiMathi" = 40, "MayiKulan" = 80, "MayiKutuna" = 40, "MayiThakurti" = 40, "MayiYapi" = 40, "Mbabaram" = 30, "Mbakwithi" = 20, "Mbiywom" = 0, "Minjungbal" = 100, "Minkin" = 0, "Mirniny" = 50, "Mithaka" = 40, "Moneroo" = 114, "MountFreelingDiyari" = 120, "Mpalityan" = 0, "Mudburra" = 10, "MudburraMcC" = 10, "MuliarraTribe" = 114, "Muruwari" = 40, "Narrungga" = 160, "NatalDowns" = 0, "NerangCreek" = 0, "NewNorciaandLeschenaultBay" = 0, "Ngaanyatjarra" = 10, "Ngadjumaya" = 50, "Ngadjuri" = 150, "Ngaiawang" = 170, "Ngamini" = 30, "Ngardily" = 10, "Ngarigu" = 110, "Ngarinyman" = 10, "Ngarla" = 10, "Ngarluma" = 10, "Ngarrindjeri" = 160, "Ngawun" = 100, "NggoiMwoi" = 120, "Nggoth" = 0, "Ngiyambaa" = 30, "Nguburindi" = 0, "Ngunawal" = 110, "Nhanta" = 10, "Nhirrpi" = 50, "NorthernMangarla" = 30, "NorthernNyangumarta" = 30, "Ntrangith" = 0, "Nukunu" = 0, "Nyamal" = 10, "Nyangumarta" = 10, "Nyawaygi" = 0, "Nyungar" = 70, "Olkola" = 0, "Paakantyi" = 40, "Pakanh" = 10, "Pallanganmiddang" = 140, "Panyjima" = 20, "Parnkala" = 160, "Payungu" = 20, "Piangil" = 130, "Pinjarra" = 0, "PintupiLuritja" = 10, "Pirriya" = 120, "Pitjantjatjara" = 10, "PittaPitta" = 30, "PortMacQuarie" = 120, "Punthamara" = 40, "Purduna" = 0, "Rirratjingu" = 0, "Ritharrngu" = 20, "SouthernWalmajarri" = 30, "SteeleGDG" = 0, "THETATIARRACOUNTRY" = 0, "Tagalag" = 100, "Thalanyji" = 0, "Thanggatti" = 0, "Tharrgari" = 0, "Thaynakwith" = 0, "Thurrawal" = 0, "Tjapwurrung" = 0, "TweedRiverandPointDangar" = 120, "Umpila" = 20, "Umpithamu" = 0, "UpperBrisbaneRiver" = 0, "Uradhi" = 0, "UwOykangand" = 0, "Wadikali" = 60, "Wadjabangayi" = 120, "Wailwan" = 120, "Wajarri" = 10, "WakaWaka" = 0, "Wakaya" = 20, "Walangama" = 0, "WalmajarriBilliluna" = 10, "WalmajarriHR" = 20, "WalmajarriNW" = 70, "Wangkajunga" = 0, "Wangkangurru" = 30, "Wangkatja" = 10, "Wangkayutyuru" = 30, "Wangkumara" = 40, "WangkumaraMcDWur" = 30, "Wardandi" = 100, "Wargamay" = 30, "Warlmanpa" = 10, "Warlpiri" = 0, "Warluwarra" = 30, "Warnman" = 10, "Warriyangga" = 20, "Warrnambool" = 0, "Warumungu" = 10, "Warungu" = 30, "Wathawurrung" = 100, "Wathiwathi" = 160, "Watjuk" = 100, "Wellington" = 170, "WembaWemba" = 40, "WesternArrarnta" = 0, "WikMuminh" = 0, "WikMungkan" = 30, "WikNgatharr" = 0, "Wiradjuri" = 30, "Wirangu" = 40, "Woiwurrung" = 100, "Wulguru" = 0, "YabulaYabula" = 120, "Yadhaykenu" = 0, "Yagara" = 60, "Yalarnnga" = 30, "Yambina" = 0, "Yandruwandha" = 30, "Yangarella" = 0, "Yangkaal" = 0, "Yannhangu" = 0, "Yanyuwa" = 30, "Yardliyawarra" = 100, "Yarluyandi" = 30, "Yawarrawarrka" = 30, "Yaygirr" = 0, "Yidiny" = 25, "Yindjibarndi" = 30, "Yindjilandji" = 50, "Yingkarta" = 0, "Yinhawangka" = 0, "Yiningay" = 100, "Yinwum" = 0, "YirYoront" = 0, "Yirandali" = 120, "YithaYitha" = 160, "YortaYorta" = 120, "Yugambeh" = 30, "Yugarabul" = 0, "Yulparija" = 20, "Yuwaalaraay" = 30, "Zorc" = 0, "Bayali" = 120, "Bibbulman" = 120, "Bigambal" = 120, "CoopersCreek" = 120, "GlenInnes" = 120, "GraniteRange" = 120, "Hawkesbury" = 120, "Janday" = 120, "Kalaamaya" = 120, "KingsCreekandtheGeorginaRiver" = 120, "LakeHindmarsh" = 120, "LowerBurdekin" = 120, "NedsCornerStation" = 120, "PytuReach" = 120, "RoxburghDowns-LowerGeorgina" = 120, "Tambo" = 120, "Tenterfield" = 120, "UpperParoo" = 120, "Wanamara" = 120)
)
)))
saf
yearsBP <- list(c("Yanda" = 100, "Badjiri" = 40, "Guwa" = 100, "Adnyamathanha" = 25, "AghuTharrnggala" = 30, "Alngith" = 0, "Alyawarr" = 0, "Aminungo" = 120, "Antekerrepenhe" = 30, "Arabana" = 30, "Awabakal" = 170, "Ayapathu" = 0, "Badimaya" = 10, "Balkurra" = 160, "Bandjalang" = 20, "Barna" = 0, "BarrowPoint" = 40, "Batyala" = 50, "Belyando" = 0, "BidyaraGungabula" = 30, "Bilinarra" = 10, "Bindal" = 30, "Bindjali" = 0, "Biri" = 30, "Birrpayi" = 130, "Bularnu" = 30, "Bunganditj" = 130, "CentralAnmatyerr" = 0, "ChampionBay" = 0, "Colac" = 140, "Coobenpil" = 0, "Coonambella" = 0, "Dalla" = 0, "Darkinyung" = 120, "DawsonRiver" = 120, "Dhangu" = 0, "Dharawal" = 130, "Dharawala" = 0, "Dharuk" = 210, "Dharumbal" = 0, "Dhayyi" = 0, "Dhudhuroa" = 150, "Dhurga" = 40, "Dhuwal" = 0, "Dhuwala" = 0, "Diyari" = 30, "Djabugay" = 30, "Djambarrpuyngu" = 0, "Djapu" = 0, "Djinang" = 0, "Durubul" = 60, "Duungidjawu" = 50, "Dyirbal" = 30, "Eucla" = 120, "FlindersIsland" = 40, "Gamilaraay" = 40, "Ganggalida" = 0, "Gangulu" = 30, "Garlali" = 35, "Githabul" = 0, "Golpa" = 0, "GoorengGooreng" = 40, "Gudang" = 0, "Gudjal" = 10, "GuguBadhun" = 0, "Gugumini" = 0, "Gumatj" = 0, "Gumbaynggir" = 30, "Gunditjmara" = 140, "Gundungurra" = 150, "Gunggari" = 50, "Gunya" = 30, "Gupapuyngu" = 0, "Gurindji" = 10, "GuuguYimidhirr" = 30, "Guwamu" = 50, "Guwar" = 0, "Guyani" = 130, "HOPKINSRIVER" = 0, "Ikarranggal" = 0, "Injinoo" = 0, "IrwinMurchison" = 0, "Iyora" = 210, "Jaitmatang" = 160, "Jaru" = 10, "JaruMcC" = 10, "Jiwarli" = 20, "Jiwarliny" = 10, "KKY" = 20, "KLY" = 20, "Kaanju" = 30, "Kalkatungu" = 40, "Kamilaroi" = 180, "Kaniyang" = 0, "Karajarri" = 10, "KarajarriNW" = 70, "Kariyarra" = 10, "Karree" = 120, "Kartujarra" = 10, "Karuwali" = 100, "Katthang" = 120, "Kaurna" = 180, "Kayardild" = 0, "Kaytetye" = 30, "Keerraywoorroong" = 100, "Keramin" = 160, "KokNar" = 0, "KokoBera" = 0, "KuguNganhcara" = 20, "Kukatj" = 20, "Kukatja" = 10, "KukuWura" = 0, "KukuYalanji" = 20, "Kungadutyi" = 40, "Kungkari" = 100, "Kunjen" = 0, "Kurnu" = 40, "Kurrama" = 10, "Kurtjar" = 30, "KuukThaayorre" = 0, "KuukuYau" = 10, "Lardil" = 0, "Linngithigh" = 40, "Mabuiag" = 95, "Malgana" = 30, "Malngin" = 10, "Malyangapa" = 50, "MangalaMcK" = 30, "MangalaNW" = 70, "Manjiljarra" = 0, "Margany" = 30, "MartuWangka" = 10, "Martuthunira" = 0, "MaryRiverandBunyaBunyaCountry" = 120, "MathiMathi" = 40, "MayiKulan" = 80, "MayiKutuna" = 40, "MayiThakurti" = 40, "MayiYapi" = 40, "Mbabaram" = 30, "Mbakwithi" = 20, "Mbiywom" = 0, "Minjungbal" = 100, "Minkin" = 0, "Mirniny" = 50, "Mithaka" = 40, "Moneroo" = 114, "MountFreelingDiyari" = 120, "Mpalityan" = 0, "Mudburra" = 10, "MudburraMcC" = 10, "MuliarraTribe" = 114, "Muruwari" = 40, "Narrungga" = 160, "NatalDowns" = 0, "NerangCreek" = 0, "NewNorciaandLeschenaultBay" = 0, "Ngaanyatjarra" = 10, "Ngadjumaya" = 50, "Ngadjuri" = 150, "Ngaiawang" = 170, "Ngamini" = 30, "Ngardily" = 10, "Ngarigu" = 110, "Ngarinyman" = 10, "Ngarla" = 10, "Ngarluma" = 10, "Ngarrindjeri" = 160, "Ngawun" = 100, "NggoiMwoi" = 120, "Nggoth" = 0, "Ngiyambaa" = 30, "Nguburindi" = 0, "Ngunawal" = 110, "Nhanta" = 10, "Nhirrpi" = 50, "NorthernMangarla" = 30, "NorthernNyangumarta" = 30, "Ntrangith" = 0, "Nukunu" = 0, "Nyamal" = 10, "Nyangumarta" = 10, "Nyawaygi" = 0, "Nyungar" = 70, "Olkola" = 0, "Paakantyi" = 40, "Pakanh" = 10, "Pallanganmiddang" = 140, "Panyjima" = 20, "Parnkala" = 160, "Payungu" = 20, "Piangil" = 130, "Pinjarra" = 0, "PintupiLuritja" = 10, "Pirriya" = 120, "Pitjantjatjara" = 10, "PittaPitta" = 30, "PortMacQuarie" = 120, "Punthamara" = 40, "Purduna" = 0, "Rirratjingu" = 0, "Ritharrngu" = 20, "SouthernWalmajarri" = 30, "SteeleGDG" = 0, "THETATIARRACOUNTRY" = 0, "Tagalag" = 100, "Thalanyji" = 0, "Thanggatti" = 0, "Tharrgari" = 0, "Thaynakwith" = 0, "Thurrawal" = 0, "Tjapwurrung" = 0, "TweedRiverandPointDangar" = 120, "Umpila" = 20, "Umpithamu" = 0, "UpperBrisbaneRiver" = 0, "Uradhi" = 0, "UwOykangand" = 0, "Wadikali" = 60, "Wadjabangayi" = 120, "Wailwan" = 120, "Wajarri" = 10, "WakaWaka" = 0, "Wakaya" = 20, "Walangama" = 0, "WalmajarriBilliluna" = 10, "WalmajarriHR" = 20, "WalmajarriNW" = 70, "Wangkajunga" = 0, "Wangkangurru" = 30, "Wangkatja" = 10, "Wangkayutyuru" = 30, "Wangkumara" = 40, "WangkumaraMcDWur" = 30, "Wardandi" = 100, "Wargamay" = 30, "Warlmanpa" = 10, "Warlpiri" = 0, "Warluwarra" = 30, "Warnman" = 10, "Warriyangga" = 20, "Warrnambool" = 0, "Warumungu" = 10, "Warungu" = 30, "Wathawurrung" = 100, "Wathiwathi" = 160, "Watjuk" = 100, "Wellington" = 170, "WembaWemba" = 40, "WesternArrarnta" = 0, "WikMuminh" = 0, "WikMungkan" = 30, "WikNgatharr" = 0, "Wiradjuri" = 30, "Wirangu" = 40, "Woiwurrung" = 100, "Wulguru" = 0, "YabulaYabula" = 120, "Yadhaykenu" = 0, "Yagara" = 60, "Yalarnnga" = 30, "Yambina" = 0, "Yandruwandha" = 30, "Yangarella" = 0, "Yangkaal" = 0, "Yannhangu" = 0, "Yanyuwa" = 30, "Yardliyawarra" = 100, "Yarluyandi" = 30, "Yawarrawarrka" = 30, "Yaygirr" = 0, "Yidiny" = 25, "Yindjibarndi" = 30, "Yindjilandji" = 50, "Yingkarta" = 0, "Yinhawangka" = 0, "Yiningay" = 100, "Yinwum" = 0, "YirYoront" = 0, "Yirandali" = 120, "YithaYitha" = 160, "YortaYorta" = 120, "Yugambeh" = 30, "Yugarabul" = 0, "Yulparija" = 20, "Yuwaalaraay" = 30, "Zorc" = 0, "Bayali" = 120, "Bibbulman" = 120, "Bigambal" = 120, "CoopersCreek" = 120, "GlenInnes" = 120, "GraniteRange" = 120, "Hawkesbury" = 120, "Janday" = 120, "Kalaamaya" = 120, "KingsCreekandtheGeorginaRiver" = 120, "LakeHindmarsh" = 120, "LowerBurdekin" = 120, "NedsCornerStation" = 120, "PytuReach" = 120, "RoxburghDowns-LowerGeorgina" = 120, "Tambo" = 120, "Tenterfield" = 120, "UpperParoo" = 120, "Wanamara" = 120))
asdfasdfasdfasdfas
c(1,2,3)
lgs <- read_csv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
library(tidyverse)
lgs <- read_csv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
setwd("~/Desktop/Github/PN_treebuilding/R")
lgs <- read_csv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
lgs <- read_csv("../Data/biphone_frequency_2020-08-28.tsv")
lgs <- lgs$tip_label
lgs <- read_tsv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv")
View(cogs)
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE) %>%
filter(X4 %in% lgs$tip_label)
View(cogs)
length(unique(cogs$X4))
lgs[!lgs %in% cogs$X4]
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
length(unique(cogs$X4))
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE) %>%
filter(X4 %in% lgs$tip_label)
length(unique(cogs$X4))
lgs$tip_label[!lgs$tip_label %in% unique(cogs$X4)]
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
sort(unique(cogs$X4))
cogs[cogs == "KuukuYa'u"] <- "KuukuYau"
sort(unique(cogs$X4))
cogs[cogs == "KuukuYa'u"] <- "KuukuYau"
sort(unique(cogs$X4))
cogs[cogs == "KuukuYa’u"] <- "KuukuYau"
sort(unique(cogs$X4))
cogs <- filter(cogs, X4 %in% lgs$tip_label)
length(unique(cogs$X4))
sort(cogs$X4)
sort(unique(cogs$X4))
#################
# SET UP
#################
library(tidyverse)
# Read biphone frequency data and take list of languages to include
lgs <- read_tsv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
# Read raw cognate data from Bouckaert et al and filter to languages to include
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
cogs[cogs == "KuukuYa’u"] <- "KuukuYau"
cogs <- filter(cogs, X4 %in% lgs$tip_label)
write_tsv(cogs, "../Data/PN_cognates.tsv")
write_tsv(cogs, paste0("../Data/PN_cognates_" Sys.Date(), ".tsv"))
########################
# Jayden Macklin-Cordes
#################
# SET UP
#################
library(tidyverse)
# Read biphone frequency data and take list of languages to include
lgs <- read_tsv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
# Read raw cognate data from Bouckaert et al and filter to languages to include
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
cogs[cogs == "KuukuYa’u"] <- "KuukuYau"
cogs <- filter(cogs, X4 %in% lgs$tip_label)
write_tsv(cogs, paste0("../Data/PN_cognates_", Sys.Date(), ".tsv"))
write_tsv(cogs, paste0("../Data/PN_cognates_", Sys.Date(), ".tsv"), col_names = FALSE)
######################
# COGNATE DATA WRANGLING
########################
# Jayden Macklin-Cordes
#################
# SET UP
#################
library(tidyverse)
# Read biphone frequency data and take list of languages to include
lgs <- read_tsv("../Data/biphone_frequency_2020-08-28.tsv") %>%
select(tip_label)
# Read raw cognate data from Bouckaert et al and filter to languages to include
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
cogs[cogs == "KuukuYa’u"] <- "KuukuYau"
cogs <- filter(cogs, X4 %in% lgs$tip_label)
write_tsv(cogs, paste0("../Data/PN_cognates_", Sys.Date(), ".tsv"), col_names = FALSE)
?write_tsv
library(tidyverse)
setwd("~/Desktop/Github/PN_treebuilding/R")
?write_tsv
freq <- rev(list.files("../Data", "biphone_frequency_raw", full.names = TRUE))[1] %>%
read_csv
freq[freq == 0] <- NA
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- select_if(freq_filtered, c(TRUE, sapply(2:ncol(freq_filtered), function (i) {unique_vals(i) > 1})))
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_", Sys.Date(), ".tsv"), na = "-")
setwd("~/Desktop/Github/PN_treebuilding/R")
library(tidyverse)
freq <- rev(list.files("../Data", "biphone_frequency_raw", full.names = TRUE))[1] %>%
read_csv
freq[freq == 0] <- NA
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- select_if(freq_filtered, c(TRUE, sapply(2:ncol(freq_filtered), function (i) {unique_vals(i) > 1})))
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_", Sys.Date(), ".tsv"))
library(tidyverse)
freq <- rev(list.files("../Data", "biphone_frequency_raw", full.names = TRUE))[1] %>%
read_csv
freq[freq == 0] <- NA
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- select_if(freq_filtered, c(TRUE, sapply(2:ncol(freq_filtered), function (i) {unique_vals(i) > 1})))
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_", Sys.Date(), ".tsv"), na = "-")
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_", Sys.Date(), ".tsv"))

library(tidyverse)
library(ape)
library(phonlex)
library(Ausphonlex)
# Load Ausphonlex
aus <- ausphonlex_v0.6.3
# Get wordlist sizes
lex_size <- aus@entries %>%
filter(str_length(xphon_form) > 0) %>%
filter(!str_detect(tags, "duplicate|boundary_initial|boundary_final|q_mark")) %>%
group_by(lex_ID, entry_ID) %>%
slice(1) %>%
group_by(lex_ID) %>%
summarise(n_entries = n())
# Get taxon labels from Map-DB-Wordlists
# Filter to clean lex_IDs
# Attach wordlist sizes
# Filter out wordlists with < 250 entries
metadata <- read_csv("~/Desktop/Github/erichround/Ausphonlex/dbs/Map-DB-Wordlists.csv") %>%
filter(Vocab_ID %in% as.character(get_clean_lex_IDs())) %>%
filter(!is.na(Bowern_307_taxon_label)) %>%
filter(Family == "Pama-Nyungan") %>% # One non-PN language is filtered out (Lardil)
mutate(lex_ID = as.numeric(Vocab_ID)) %>%
select(lex_ID, tip_label = Bowern_307_taxon_label) %>%
left_join(lex_size, by = "lex_ID") %>%
filter(n_entries >= 250)
write_csv(metadata, paste0("../Data/wordlist_sizes_", Sys.Date(), ".csv"))
# Get biphone forward/backward transition frequencies
set.seed(2020)
biphone_fwd <- as_tibble(extract_freq_dataset("biphone_fwd_clean"))
set.seed(2020)
biphone_bkwd <- as_tibble(extract_freq_dataset("biphone_bkwd_clean"))
#################
# BINARY DATASET
#################
binarize_frequencies <- function(dataset) {
dataset[, -1][dataset[, -1] > 0] = 1
dataset
}
phylo_data_binary <- metadata %>% left_join(biphone_fwd, by = "lex_ID") %>%
select(-tip_label, -n_entries) %>%
binarize_frequencies
write_csv(phylo_data_binary, paste0("../Data/biphone_binary_", Sys.Date(), ".csv"))
############################
# BIPHONE FREQUENCY DATASET
############################
phylo_data_biphone_fwd <- metadata %>% left_join(biphone_fwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
rename_with(paste0, -one_of("tip_label"), "_fwd")
phylo_data_biphone_bkwd <- metadata %>% left_join(biphone_bkwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
rename_with(paste0, -one_of("tip_label"), "_bkwd")
phylo_data_biphone <- left_join(phylo_data_biphone_fwd, phylo_data_biphone_bkwd, by = "tip_label")
write_csv(phylo_data_biphone, paste0("../Data/biphone_frequency_", Sys.Date(), ".csv"))
2 * 2237
freq[freq == 0] <- NA
# Takes raw biphone datasets extracted from Ausphonlex database and raw cognate
# dataset from Bouckaert et al. (2018) and performs some filtering and minimal
# wrangling for use with BEAST.
# Input:
#   - Data/biphone_binary_{date}.csv
#   - Data/biphone_frequency_{date}.csv
#   - Bouckaert_etal/Pny10-Export.tsv
# Output:
#   - Data/biphone_binary_filtered_{date}.csv
#   - Data/biphone_frequency_filtered_{date}.csv
#   - Data/PN_cognates_filtered_{date}.tsv
library(tidyverse)
library(ape)
bin <- rev(list.files("../Data", "biphone_binary", full.names = TRUE))[1] %>%
read_csv
freq <- rev(list.files("../Data", "biphone_frequency", full.names = TRUE))[1] %>%
read_csv
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
# BIPHONE BINARY DATA
# Remove empty sites (all NAs), convert to nexus with "-" as NA symbol
bin_filtered <- bin %>%
select_if(c(TRUE, sapply(2:ncol(bin), function (i) grepl("0|1", bin[,i]))))
# (The sapply function selects cols containing at least one 0 or 1 value. We also
#  need to retain the 'tip_label' column (which obviously doesn't contain 0 or 1)
#  so sapply gets wrapped in `c(TRUE, sapply(...))` to retain that first column)
# Turn dataframe into list
bin_list <- lapply(split(bin[,-1], 1:nrow(bin)), as.list) %>%
lapply(as.character) %>%
lapply(function (x) {x[x=="NA"] <- "-"; x})
names(bin_list) <- bin$tip_label
write.nexus.data(bin_list, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"), format = "standard", interleaved = FALSE)
# Change symbols field in nexus file (ape automatically lists all 9 digits instead of just 0 and 1)
nex <- readLines(paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
nex <- gsub("0123456789", "01", nex)
writeLines(nex, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
# BIPHONE TRANSITION FREQUENCY DATA
# Convert 0s to NAs, filter out invariant sites, re-write as tsv with "-" as NA symbol
freq[freq == 0] <- NA
freq_filtered <- freq %>%
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
freq_subset <- freq_filtered[,1:100]
unique(freq_filtered[,2])
unique(freq_filtered[,3])
length(unique(freq_filtered[,3]))
ncol(unique(freq_filtered[,3]))
nrow(unique(freq_filtered[,3]))
?unique
nrow(unique(freq_filtered[,3], incomparables = NA))
unique(freq_filtered[,2])[!is.na]
unique(freq_filtered[,2])[!is.na()]
unique(freq_filtered[,2])[!is.na(unique(freq_filtered[,2]))]
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i])))) %>%
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i])))) %>%
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
unique_vals(2)
unique_vals(2) > 2
unique_vals(2) > 1
# Data filtering
# Jayden Macklin-Cordes
# 20 August 2020
# # # # # # # # # # # #
# Takes raw biphone datasets extracted from Ausphonlex database and raw cognate
# dataset from Bouckaert et al. (2018) and performs some filtering and minimal
# wrangling for use with BEAST.
# Input:
#   - Data/biphone_binary_{date}.csv
#   - Data/biphone_frequency_{date}.csv
#   - Bouckaert_etal/Pny10-Export.tsv
# Output:
#   - Data/biphone_binary_filtered_{date}.csv
#   - Data/biphone_frequency_filtered_{date}.csv
#   - Data/PN_cognates_filtered_{date}.tsv
library(tidyverse)
library(ape)
bin <- rev(list.files("../Data", "biphone_binary", full.names = TRUE))[1] %>%
read_csv
freq <- rev(list.files("../Data", "biphone_frequency", full.names = TRUE))[1] %>%
read_csv
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
# BIPHONE BINARY DATA
# Remove empty sites (all NAs), convert to nexus with "-" as NA symbol
bin_filtered <- bin %>%
select_if(c(TRUE, sapply(2:ncol(bin), function (i) grepl("0|1", bin[,i]))))
# (The sapply function selects cols containing at least one 0 or 1 value. We also
#  need to retain the 'tip_label' column (which obviously doesn't contain 0 or 1)
#  so sapply gets wrapped in `c(TRUE, sapply(...))` to retain that first column)
# Turn dataframe into list
bin_list <- lapply(split(bin[,-1], 1:nrow(bin)), as.list) %>%
lapply(as.character) %>%
lapply(function (x) {x[x=="NA"] <- "-"; x})
names(bin_list) <- bin$tip_label
write.nexus.data(bin_list, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"), format = "standard", interleaved = FALSE)
# Change symbols field in nexus file (ape automatically lists all 9 digits instead of just 0 and 1)
nex <- readLines(paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
nex <- gsub("0123456789", "01", nex)
writeLines(nex, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
# BIPHONE TRANSITION FREQUENCY DATA
# Convert 0s to NAs, filter out invariant sites, re-write as tsv with "-" as NA symbol
freq[freq == 0] <- NA
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- select_if(freq_filtered, c(TRUE, sapply(2:ncol(freq_filtered), function (i) {unique_vals(i) > 1})))
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_filtered_", Sys.Date(), ".tsv"))
?list.files
rev(list.files("../Data", "biphone_binary.+csv", full.names = TRUE))[1]
rev(list.files("../Data", "biphone_binary", full.names = TRUE))[1]
lgs <- rev(list.files("../Data", "wordlist_sizes", full.names = TRUE))[1] %>%
read_csv
View(lgs)
# Get subgroup info
lg_subgroups <- read_csv("../Data/CB_raw/Languages-StandardLangs.csv") %>%
filter(Ascii_Name %in% lgs$tip_label) %>%
select(Ascii_Name, `TEMP@SubgroupName`)
View(lg_subgroups)
View(lgs)
lg_subgroups <- read_csv("../Data/CB_raw/Languages-StandardLangs.csv")
sort(lg_subgroups$Ascii_Name)
View(filter(lg_subgroups, Ascii_Name == "Wayilwan"))
filter(lg_subgroups, Ascii_Name == "Wayilwan")$`TEMP@SubgroupName`
# Prepare subgroup files to import into Beauti
# Jayden Macklin-Cordes
# # # # # # # # # # # # # # # # # # # # # # # #
# This script generates a simple text file for each Pama-Nyungan subgroup
# for importing clade priors into Beauti.
# Each taxon in our dataset is allocated to its corresponding subgroup in
# Bouckaert, Bowern and Atkinson 2018.
# This is done by matching taxa to subgroups in the "Languages-StandardLangs.csv"
# spreadsheet then making some manual adjustments to match Bouckaert, Bowern and
# Atkinson 2018.
# Note that several subgroups contain only one language. These don't need to be
# imported into Beauti (they're uninformative without ages) but
# the script generates them anyway for ease of reproducibility if more languages
# are added in the future.
library(tidyverse)
lgs <- rev(list.files("../Data", "wordlist_sizes", full.names = TRUE))[1] %>%
read_csv
# Get subgroup info
lg_subgroups <- read_csv("../Data/CB_raw/Languages-StandardLangs.csv") %>%
filter(Ascii_Name %in% lgs$tip_label) %>%
select(Ascii_Name, `TEMP@SubgroupName`)
# Manual adjustments to match Bouckaert, Bowern and Atkinson (2018)
lg_subgroups$`TEMP@SubgroupName`[lg_subgroups$`TEMP@SubgroupName` == "Yol≈ãu"] <- "Yolngu"
lg_subgroups$`TEMP@SubgroupName`[lg_subgroups$`TEMP@SubgroupName` %in% c("Dyirbalic", "Maric", "Nyawaygic", "Paman")] <- "PamaMaric"
lg_subgroups$`TEMP@SubgroupName`[lg_subgroups$`TEMP@SubgroupName` == "Kanyara-Martatha"] <- "Kanyara-Mantharta"
lg_subgroups$`TEMP@SubgroupName`[lg_subgroups$`TEMP@SubgroupName` == "Mirniny"] <- "SouthWest"
lg_subgroups$`TEMP@SubgroupName`[lg_subgroups$`TEMP@SubgroupName` == "Pilbara"] <- "Ngayarta"
lg_subgroups[lg_subgroups$Ascii_Name == "Paakantyi",2] <- "PaakantyiRegion"
lg_subgroups[lg_subgroups$Ascii_Name == "Bandjalang",2] <- "Bandjalangic"
# Manually add lgs missing from Languages-StandardLangs spreadsheet (or listed as "no subgroup defined")
# to match Bouckaert, Bowern and Atkinson (2018)
missing_lgs <- tibble("Ascii_Name" = c("Yaygirr",
"WalmajarriHR",
"Tharrgari",
"WesternArrarnta",
"MangalaMcK",
"Ngadjumaya",
"Mbakwithi",
"Wailwan"),
"TEMP@SubgroupName" = c("Gumbaynggiric",
"Ngumpin-Yapa",
"Kanyara-Mantharta",
"Arandic",
"Marrngu",
"SouthWest",
"PamaMaric",
"Central NSW")
)
lg_subgroups <- bind_rows(lg_subgroups, missing_lgs)
# Get well-formed list of subgroup names
subgroups <- unique(lg_subgroups$`TEMP@SubgroupName`)
subgroups[subgroups == "no subgroup defined"] <- NA
subgroups <- subgroups[!is.na(subgroups)]
#subgroups <- gsub("-| ", "", subgroups)
write_subgroup_files <- function (lg_subgroups) {
subgroup_dfs <- lapply(subgroups, function (i) {filter(lg_subgroups, `TEMP@SubgroupName` == i) %>%
select(Ascii_Name)})
names(subgroup_dfs) <- gsub("-| ", "", subgroups)
lapply(1:length(subgroup_dfs),
function (i) write_tsv(subgroup_dfs[[i]],
paste0("../Data/subgroups/", names(subgroup_dfs[i]), ".txt"),
col_names = FALSE))
}
write_subgroup_files(lg_subgroups)
setwd("~/Desktop/Github/PN_treebuilding/R")
#################
# DATA WRANGLING
#################
# Jayden Macklin-Cordes
# 13 December 2019
# Revised: 28 August 2020
# This script extracts binary biphone and transition frequency data from Ausphonlex
# NB: Includes hard-coded filepaths
# Requires phonlex and Ausphonlex packages (not publicly released)
#################
# SET UP
#################
library(tidyverse)
library(ape)
library(phonlex)
library(Ausphonlex)
# Load Ausphonlex
aus <- ausphonlex_v0.6.3
# Get wordlist sizes
lex_size <- aus@entries %>%
filter(str_length(xphon_form) > 0) %>%
filter(!str_detect(tags, "duplicate|boundary_initial|boundary_final|q_mark")) %>%
group_by(lex_ID, entry_ID) %>%
slice(1) %>%
group_by(lex_ID) %>%
summarise(n_entries = n())
# Get taxon labels from Map-DB-Wordlists
# Filter to clean lex_IDs
# Attach wordlist sizes
# Filter out wordlists with < 250 entries
metadata <- read_csv("~/Desktop/Github/erichround/Ausphonlex/dbs/Map-DB-Wordlists.csv") %>%
filter(Vocab_ID %in% as.character(get_clean_lex_IDs())) %>%
filter(!is.na(Bowern_307_taxon_label)) %>%
filter(Family == "Pama-Nyungan") %>% # One non-PN language is filtered out (Lardil)
mutate(lex_ID = as.numeric(Vocab_ID)) %>%
select(lex_ID, tip_label = Bowern_307_taxon_label) %>%
left_join(lex_size, by = "lex_ID") %>%
filter(n_entries >= 250)
write_csv(metadata, paste0("../Data/wordlist_sizes_", Sys.Date(), ".csv"))
# Get biphone forward/backward transition frequencies
set.seed(2020)
biphone_fwd <- as_tibble(extract_freq_dataset("biphone_fwd_clean"))
set.seed(2020)
biphone_bkwd <- as_tibble(extract_freq_dataset("biphone_bkwd_clean"))
#################
# BINARY DATASET
#################
binarize_frequencies <- function(dataset) {
dataset[, -1][dataset[, -1] > 0] = 1
dataset
}
phylo_data_binary <- metadata %>% left_join(biphone_fwd, by = "lex_ID") %>%
select(-tip_label, -n_entries) %>%
binarize_frequencies
write_csv(phylo_data_binary, paste0("../Data/biphone_binary_raw_", Sys.Date(), ".csv"))
############################
# BIPHONE FREQUENCY DATASET
############################
phylo_data_biphone_fwd <- metadata %>% left_join(biphone_fwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
rename_with(paste0, -one_of("tip_label"), "_fwd")
phylo_data_biphone_bkwd <- metadata %>% left_join(biphone_bkwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
rename_with(paste0, -one_of("tip_label"), "_bkwd")
phylo_data_biphone <- left_join(phylo_data_biphone_fwd, phylo_data_biphone_bkwd, by = "tip_label")
write_csv(phylo_data_biphone, paste0("../Data/biphone_frequency_raw_", Sys.Date(), ".csv"))
# Data filtering
# Jayden Macklin-Cordes
# 20 August 2020
# # # # # # # # # # # #
# Takes raw biphone datasets extracted from Ausphonlex database and raw cognate
# dataset from Bouckaert et al. (2018) and performs some filtering and minimal
# wrangling for use with BEAST.
# Input:
#   - Data/biphone_binary_{date}.csv
#   - Data/biphone_frequency_{date}.csv
#   - Bouckaert_etal/Pny10-Export.tsv
# Output:
#   - Data/biphone_binary_filtered_{date}.csv
#   - Data/biphone_frequency_filtered_{date}.csv
#   - Data/PN_cognates_filtered_{date}.tsv
library(tidyverse)
library(ape)
bin <- rev(list.files("../Data", "biphone_binary_raw", full.names = TRUE))[1] %>%
read_csv
freq <- rev(list.files("../Data", "biphone_frequency_raw", full.names = TRUE))[1] %>%
read_csv
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
# BIPHONE BINARY DATA
# Remove empty sites (all NAs), convert to nexus with "-" as NA symbol
bin_filtered <- bin %>%
select_if(c(TRUE, sapply(2:ncol(bin), function (i) grepl("0|1", bin[,i]))))
# (The sapply function selects cols containing at least one 0 or 1 value. We also
#  need to retain the 'tip_label' column (which obviously doesn't contain 0 or 1)
#  so sapply gets wrapped in `c(TRUE, sapply(...))` to retain that first column)
# Turn dataframe into list
bin_list <- lapply(split(bin[,-1], 1:nrow(bin)), as.list) %>%
lapply(as.character) %>%
lapply(function (x) {x[x=="NA"] <- "-"; x})
names(bin_list) <- bin$tip_label
write.nexus.data(bin_list, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"), format = "standard", interleaved = FALSE)
# Change symbols field in nexus file (ape automatically lists all 9 digits instead of just 0 and 1)
nex <- readLines(paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
nex <- gsub("0123456789", "01", nex)
writeLines(nex, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
# BIPHONE TRANSITION FREQUENCY DATA
# Convert 0s to NAs, filter out invariant sites, re-write as tsv with "-" as NA symbol
freq[freq == 0] <- NA
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- select_if(freq_filtered, c(TRUE, sapply(2:ncol(freq_filtered), function (i) {unique_vals(i) > 1})))
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_", Sys.Date(), ".tsv"))
View(bin)
View(freq)
setwd("~/Desktop/Github/PN_treebuilding/R")
setwd("~/Desktop/Github/PN_treebuilding/R")
#################
# DATA WRANGLING
#################
# Jayden Macklin-Cordes
# 13 December 2019
# Revised: 28 August 2020
# This script extracts binary biphone and transition frequency data from Ausphonlex
# NB: Includes hard-coded filepaths
# Requires phonlex and Ausphonlex packages (not publicly released)
#################
# SET UP
#################
library(tidyverse)
library(ape)
library(phonlex)
library(Ausphonlex)
# Load Ausphonlex
aus <- ausphonlex_v0.6.3
# Get wordlist sizes
lex_size <- aus@entries %>%
filter(str_length(xphon_form) > 0) %>%
filter(!str_detect(tags, "duplicate|boundary_initial|boundary_final|q_mark")) %>%
group_by(lex_ID, entry_ID) %>%
slice(1) %>%
group_by(lex_ID) %>%
summarise(n_entries = n())
# Get taxon labels from Map-DB-Wordlists
# Filter to clean lex_IDs
# Attach wordlist sizes
# Filter out wordlists with < 250 entries
metadata <- read_csv("~/Desktop/Github/erichround/Ausphonlex/dbs/Map-DB-Wordlists.csv") %>%
filter(Vocab_ID %in% as.character(get_clean_lex_IDs())) %>%
filter(!is.na(Bowern_307_taxon_label)) %>%
filter(Family == "Pama-Nyungan") %>% # One non-PN language is filtered out (Lardil)
mutate(lex_ID = as.numeric(Vocab_ID)) %>%
select(lex_ID, tip_label = Bowern_307_taxon_label) %>%
left_join(lex_size, by = "lex_ID") %>%
filter(n_entries >= 250)
write_csv(metadata, paste0("../Data/wordlist_sizes_", Sys.Date(), ".csv"))
# Get biphone forward/backward transition frequencies
set.seed(2020)
biphone_fwd <- as_tibble(extract_freq_dataset("biphone_fwd_clean"))
set.seed(2020)
biphone_bkwd <- as_tibble(extract_freq_dataset("biphone_bkwd_clean"))
#################
# BINARY DATASET
#################
binarize_frequencies <- function(dataset) {
dataset[, -1][dataset[, -1] > 0] = 1
dataset
}
phylo_data_binary <- metadata %>% left_join(biphone_fwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
binarize_frequencies
write_csv(phylo_data_binary, paste0("../Data/biphone_binary_raw_", Sys.Date(), ".csv"))
############################
# BIPHONE FREQUENCY DATASET
############################
phylo_data_biphone_fwd <- metadata %>% left_join(biphone_fwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
rename_with(paste0, -one_of("tip_label"), "_fwd")
phylo_data_biphone_bkwd <- metadata %>% left_join(biphone_bkwd, by = "lex_ID") %>%
select(-lex_ID, -n_entries) %>%
rename_with(paste0, -one_of("tip_label"), "_bkwd")
phylo_data_biphone <- left_join(phylo_data_biphone_fwd, phylo_data_biphone_bkwd, by = "tip_label")
write_csv(phylo_data_biphone, paste0("../Data/biphone_frequency_raw_", Sys.Date(), ".csv"))
# Data filtering
# Jayden Macklin-Cordes
# 20 August 2020
# # # # # # # # # # # #
# Takes raw biphone datasets extracted from Ausphonlex database and raw cognate
# dataset from Bouckaert et al. (2018) and performs some filtering and minimal
# wrangling for use with BEAST.
# Input:
#   - Data/biphone_binary_{date}.csv
#   - Data/biphone_frequency_{date}.csv
#   - Bouckaert_etal/Pny10-Export.tsv
# Output:
#   - Data/biphone_binary_filtered_{date}.csv
#   - Data/biphone_frequency_filtered_{date}.csv
#   - Data/PN_cognates_filtered_{date}.tsv
library(tidyverse)
library(ape)
bin <- rev(list.files("../Data", "biphone_binary_raw", full.names = TRUE))[1] %>%
read_csv
freq <- rev(list.files("../Data", "biphone_frequency_raw", full.names = TRUE))[1] %>%
read_csv
cogs <- read_tsv("../Bouckaert_etal/Pny10-Export.tsv", col_names = FALSE)
# BIPHONE BINARY DATA
# Remove empty sites (all NAs), convert to nexus with "-" as NA symbol
bin_filtered <- bin %>%
select_if(c(TRUE, sapply(2:ncol(bin), function (i) grepl("0|1", bin[,i]))))
# (The sapply function selects cols containing at least one 0 or 1 value. We also
#  need to retain the 'tip_label' column (which obviously doesn't contain 0 or 1)
#  so sapply gets wrapped in `c(TRUE, sapply(...))` to retain that first column)
# Turn dataframe into list
bin_list <- lapply(split(bin[,-1], 1:nrow(bin)), as.list) %>%
lapply(as.character) %>%
lapply(function (x) {x[x=="NA"] <- "-"; x})
names(bin_list) <- bin$tip_label
write.nexus.data(bin_list, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"), format = "standard", interleaved = FALSE)
# Change symbols field in nexus file (ape automatically lists all 9 digits instead of just 0 and 1)
nex <- readLines(paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
nex <- gsub("0123456789", "01", nex)
writeLines(nex, paste0("../Data/biphone_binary_", Sys.Date(), ".nex"))
# BIPHONE TRANSITION FREQUENCY DATA
# Convert 0s to NAs, filter out invariant sites, re-write as tsv with "-" as NA symbol
freq[freq == 0] <- NA
freq_filtered <- freq %>%
# Selects columns with at least one digit (i.e. not all NAs)
select_if(c(TRUE, sapply(2:ncol(freq), function (i) grepl("[0-9]", freq[,i]))))
# Select columns with at least two unique values
unique_vals <- function (i) {
length(
unique(freq_filtered[,i])[!is.na(unique(freq_filtered[,i]))]
)
}
freq_filtered <- select_if(freq_filtered, c(TRUE, sapply(2:ncol(freq_filtered), function (i) {unique_vals(i) > 1})))
write_tsv(freq_filtered, paste0("../Data/biphone_frequency_", Sys.Date(), ".tsv"))
View(biphone_fwd)
View(bin_filtered)
